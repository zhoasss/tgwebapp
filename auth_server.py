# auth_server.py
import os
import hmac
import hashlib
from pkgutil import get_data
from urllib.parse import unquote, parse_qsl
from flask import Flask, request, jsonify
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ p.env
load_dotenv("p.env")

app = Flask(__name__)
BOT_TOKEN = os.getenv("BOT_TOKEN")

def validate_init_data(init_):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å initData –∏–∑ Telegram Mini App.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ, –∏–Ω–∞—á–µ None.
    """
    try:
        if not get_data or not isinstance(get_data, str):
            return None

        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL –∏ –ø–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        decoded = unquote(get_data)
        parsed = dict(parse_qsl(decoded))
        received_hash = parsed.pop('hash', None)
        
        if not received_hash or not BOT_TOKEN:
            return None

        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–ª—é—á—É!)
        data_check_string = '\n'.join(
            f"{k}={v}" for k, v in sorted(parsed.items())
        )

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á: HMAC-SHA256("WebAppData", BOT_TOKEN)
        secret_key = hmac.new(
            key=b"WebAppData",
            msg=BOT_TOKEN.encode(),
            digestmod=hashlib.sha256
        ).digest()

        # –°—á–∏—Ç–∞–µ–º —Ö–µ—à –æ—Ç –¥–∞–Ω–Ω—ã—Ö
        computed_hash = hmac.new(
            key=secret_key,
            msg=data_check_string.encode(),
            digestmod=hashlib.sha256
        ).hexdigest()

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ö–µ—à–µ–π
        if not hmac.compare_digest(computed_hash, received_hash):
            return None

        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON-–æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if 'user' in parsed:
            import json
            parsed['user'] = json.loads(parsed['user'])

        return parsed

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ initData: {e}")
        return None


@app.route('/auth', methods=['POST'])
def auth():
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Mini App.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç: { "initData": "user=...&hash=...&auth_date=..." }
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: { "success": true, "user": { ... } }
    """
    try:
        data = request.get_json()
        if not data:
            return jsonify({"error": "JSON body required"}), 400

        init_data = data.get('initData')
        if not init_data:
            return jsonify({"error": "initData is required"}), 400

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å
        user_data = validate_init_data(init_data)
        if not user_data:
            return jsonify({"error": "Invalid hash or expired data"}), 401

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = user_data.get('user', {})
        return jsonify({
            "success": True,
            "user": {
                "id": user.get('id'),
                "first_name": user.get('first_name'),
                "last_name": user.get('last_name'),
                "username": user.get('username'),
                "photo_url": user.get('photo_url'),
                "auth_date": user_data.get('auth_date')
            }
        })

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ —ç–Ω–¥–ø–æ–∏–Ω—Ç–µ /auth: {e}")
        return jsonify({"error": "Internal server error"}), 500


if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if not BOT_TOKEN:
        raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ p.env")

    print(f"‚úÖ –°–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω. BOT_TOKEN –∑–∞–≥—Ä—É–∂–µ–Ω.")
    print(f"üì° –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ http://localhost:8000/auth")
    app.run(host='0.0.0.0', port=8000, debug=True)